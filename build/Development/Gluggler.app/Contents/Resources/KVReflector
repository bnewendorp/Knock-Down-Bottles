/*
 *  KVReflector.h
 *  KVO Implementation
 *
 *  Created by Christian Noon on 9/15/09.
 *  Copyright 2009 Amoniq LLC. All rights reserved.
 *
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *  
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */

#ifndef _KVREFLECTOR_H_
#define _KVREFLECTOR_H_

#include "KVObserver"


/**
 * A singleton reflector class implementing the key value observer (KVO) design pattern.
 * This class receives updates to key values from any place which are then passed onto any 
 * observer classes listening for the updated key. Any observer must register with this class
 * to receive updates from a certain value. Once they have registered, they will receive all
 * updates made to that key. The observers must also make sure they remove themselves from 
 * the reflector in their destructor.
 */
namespace aq
{
	class KVReflector
	{
	protected:
		
		/**
		 * Default constructor, does nothing.
		 */
		KVReflector();
		
	public:
		
		/**
		 * Create a singleton instance of the reflector.
		 */
		static KVReflector* instance() { static KVReflector reflector; return &reflector; }
		
		
		/**
		 * Called from anywhere to alert all listening observers listening to the given
		 * key that there is an update coming.
		 *
		 * @param value - the value for the given key (can be any type).
		 * @param key - the key which the observers are listening for.
		 */
		template<typename T>
		void willUpdateValueForKey(T value, aq::String key)
		{
			std::multimap<KVObserver*, aq::String>::iterator iter;
			for (iter = _observations.begin(); iter != _observations.end(); iter++)
				if ((*iter).second == key)
					(*iter).first->willChangeValueForKey(value, key);
		}


		/**
		 * Called from anywhere to alert all listening observers listening to the given
		 * key that the value was updated.
		 *
		 * @param value - the value for the given key (can be any type).
		 * @param key - the key which the observers are listening for.
		 */	
		template<typename T>
		void didUpdateValueForKey(T value, aq::String key)
		{
			std::multimap<KVObserver*, aq::String>::iterator iter;
			for (iter = _observations.begin(); iter != _observations.end(); iter++)
				if ((*iter).second == key)
					(*iter).first->didChangeValueForKey(value, key);
		}
		
		
		/**
		 * Method MUST be called in the sub-classed Observer instance in the destructor.
		 *
		 * @param observer - the observer pointer to remove from the reflector class.
		 */
		void removeObserver(KVObserver* observer);


		/**
		 * Called by any sub-class of KVObserver to add a key to listen for.
		 *
		 * @param observer - the observer pointer to remove from the reflector class.
		 * @param key - the key which the observers are listening for.
		 */
		void addObserverWithKey(KVObserver* observer, aq::String key);
		
		
	private:
		// Private variables
		std::multimap<KVObserver*, aq::String> _observations;
	};
}

#endif













